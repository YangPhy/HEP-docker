ARG UBUNTU_VER=20.04
FROM ubuntu:${UBUNTU_VER}

LABEL maintainer="Yang Ma mayangluon@pitt.edu"
LABEL build_date="2023-04-05"

ARG USER_NAME=yang
#ARG OS_TYPE=x86_64
ARG OS_TYPE=aarch64
ARG PY_VER=3.8
ARG ROOT_VER=6.28.00
ARG LHAPDF_VER=6.5.4
ARG MG5_VER=3.4.2

ENV DEBIAN_FRONTEND=noninteractive

SHELL [ "/bin/bash", "-c" ]

# For users in China, please uncomment this part for faster sources from aliyun.com 
#RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list \
#    && sed -i s@/security.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list \
#    && apt clean && apt update


RUN echo 'APT::Install-Suggests "0";' >> /etc/apt/apt.conf.d/00-docker \
    && echo 'APT::Install-Recommends "0";' >> /etc/apt/apt.conf.d/00-docker \
    && apt update && apt install -y sudo \
    && apt install -y gcc g++ gfortran make cmake vim git curl wget ocaml bc rsync \
          ghostscript openssh-client openssh-server screen tmux htop zlib1g zlib1g-dev \
          libbz2-dev python3-dev python3-six python3-numpy python3-pip\
    && apt -y clean && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && useradd -m ${USER_NAME} -s /bin/bash && adduser ${USER_NAME}  sudo \
    && echo "${USER_NAME} ALL=(ALL) NOPASSWD : ALL" | tee /etc/sudoers.d/nopasswd4sudo

USER ${USER_NAME} 
WORKDIR /home/${USER_NAME}

# Install zsh
RUN sudo apt update \
    && sudo apt install -y zsh zsh-autosuggestions zsh-syntax-highlighting \
    && sudo apt install -y ca-certificates &&  sudo update-ca-certificates \
    && sudo apt -y clean && sudo apt-get -y autoremove \
    && sudo rm -rf /var/lib/apt/lists/* \
    && sudo ln -s /usr/bin/python3 /usr/bin/python \
    && git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh \
    && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc \
    && sed -i "s/robbyrussell/ys/" ~/.zshrc \
    && echo "source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ~/.zshrc \
    && echo "source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh" >> ~/.zshrc \
    && echo "setopt nonomatch" >> ~/.zshrc \
    && echo "export TERM=xterm-256color" >> ~/.zshrc \
    && sudo usermod -s /bin/zsh ${USER_NAME} 


# Install LHAPDF 
ENV PATH=$PATH:/usr/bin/python

WORKDIR /home/${USER_NAME}/work/HEPtools

RUN sudo chown -hR ${USER_NAME} /home/${USER_NAME} \
    && sudo chgrp -hR ${USER_NAME} /home/${USER_NAME} \
    && wget https://lhapdf.hepforge.org/downloads/?f=LHAPDF-${LHAPDF_VER}.tar.gz -O ~/LHAPDF-${LHAPDF_VER}.tar.gz \
    && tar -xvf ~/LHAPDF-${LHAPDF_VER}.tar.gz \
    && cd /home/${USER_NAME}/work/HEPtools/LHAPDF-${LHAPDF_VER} \
    && ./configure --prefix=/home/${USER_NAME}/work/HEPtools/lhapdf PYTHON=$(which python) \
    && make && make install \
    && rm -rf ~/work/HEPtools/LHAPDF-${LHAPDF_VER} \
    && rm ~/LHAPDF-${LHAPDF_VER}.tar.gz \
    && echo "export PATH=\$PATH:/home/${USER_NAME}/work/HEPtools/lhapdf/bin" >> ~/.zshrc \
    && echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/home/${USER_NAME}/work/HEPtools/lhapdf/lib" >> ~/.zshrc \
    && echo "export PYTHONPATH=\$PYTHONPATH:/home/${USER_NAME}/work/HEPtools/lhapdf/lib/python${PY_VER}/site-packages" >> ~/.zshrc \
    && echo "export LHAPDF_DATA_PATH=/home/${USER_NAME}/work/HEPtools/lhapdf/share/LHAPDF" >> ~/.zshrc 

# Install HepMC
ARG HEPMC_VERSION=2.06.11

RUN wget --no-check-certificate http://hepmc.web.cern.ch/hepmc/releases/hepmc${HEPMC_VERSION}.tgz -O ~/hepmc${HEPMC_VERSION}.tgz \
    && cd /home/${USER_NAME}/work/HEPtools \
    && tar -xvf ~/hepmc${HEPMC_VERSION}.tgz \
    && cd HepMC-${HEPMC_VERSION} \
    && wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O './config.guess' \
    && wget 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -O './config.sub' \
    && cd /home/${USER_NAME}/work/HEPtools \
    && mkdir build hepmc2 \
    && cmake \
      -DCMAKE_CXX_COMPILER=$(which g++) \
      -DCMAKE_BUILD_TYPE=Release \
      -Dbuild_docs:BOOL=OFF \
      -Dmomentum:STRING=MEV \
      -Dlength:STRING=MM \
      -DCMAKE_INSTALL_PREFIX=/home/${USER_NAME}/work/HEPtools/hepmc2 \
      -S /home/${USER_NAME}/work/HEPtools/HepMC-${HEPMC_VERSION} \
      -B /home/${USER_NAME}/work/HEPtools/build \
    && cmake build -L \
    && cmake --build build -- -j$(($(nproc) - 1))  \
    && cmake --build build --target install \
    && echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/home/${USER_NAME}/work/HEPtools/hepmc2/lib" >> ~/.zshrc \
    && rm -rf /home/${USER_NAME}/work/HEPtools/build /home/${USER_NAME}/work/HEPtools/hepmc${HEPMC_VERSION} \
    && rm ~/hepmc${HEPMC_VERSION}.tgz
 
 # Install FastJet
ARG FASTJET_VERSION=3.4.0
RUN wget http://fastjet.fr/repo/fastjet-${FASTJET_VERSION}.tar.gz -O ~/fastjet-${FASTJET_VERSION}.tar.gz \
    && cd /home/${USER_NAME}/work/HEPtools \
    && tar xvfz ~/fastjet-${FASTJET_VERSION}.tar.gz \
    && cd fastjet-${FASTJET_VERSION} \
    && export CXX=$(which g++) \
    && export PYTHON=$(command -v python) \
    && export PYTHON_CONFIG=$(find /usr/bin/ -iname "python3-config") \
    && ./configure \
      --prefix=/home/${USER_NAME}/work/HEPtools/fastjet \
      --enable-pyext=yes \
    && make -j$(($(nproc) - 1)) \
    && make check && make install \
    && echo "export PYTHONPATH=/home/${USER_NAME}/work/HEPtools/fastjet/lib/python${PY_VER}/site-packages:\$PYTHONPATH" >> ~/.zshrc \
    && cd /home/${USER_NAME}/work/HEPtools \
    && rm -rf fastjet-${FASTJET_VERSION} && rm ~/fastjet-${FASTJET_VERSION}.tar.gz

# Install Pythia 8 
ARG PYTHIA_VERSION=8309
RUN wget https://pythia.org/download/pythia${PYTHIA_VERSION:0:2}/pythia${PYTHIA_VERSION}.tgz -O ~/pythia${PYTHIA_VERSION}.tgz \
    && cd /home/${USER_NAME}/work/HEPtools \
    && tar -xvf ~/pythia${PYTHIA_VERSION}.tgz \
    && cd pythia${PYTHIA_VERSION} \
    && ./configure \
       --prefix=/home/${USER_NAME}/work/HEPtools/pythia8 \
       --arch=Linux \
       --cxx=g++ \
       --with-gzip \
       --with-hepmc2=/home/${USER_NAME}/work/HEPtools/hepmc2 \
       --with-lhapdf6=/home/${USER_NAME}/work/HEPtools/lhapdf \
       --with-fastjet3=/home/${USER_NAME}/work/HEPtools/fastjet \
       --with-python=$(command -v python3) \
       --with-python-include=/usr/include/python${PY_VER} \
       --cxx-common="-O2 -pedantic -pthread  -lpthread -W -Wall -Wshadow -fPIC -std=c++17" \
# For AMD64 arch, apply -m64 
       #--cxx-common="-O2 -m64 -pedantic -pthread  -lpthread -W -Wall -Wshadow -fPIC -std=c++17" \
       --cxx-shared="-shared -std=c++17" \
    && make -j$(($(nproc) - 1)) && make install \
    && echo "export PYTHONPATH=/home/${USER_NAME}/work/HEPtools/pythia8/lib:\$PYTHONPATH" >> ~/.zshrc \
    && echo "export LD_LIBRARY_PATH=/home/${USER_NAME}/work/HEPtools/pythia8/lib:\$LD_LIBRARY_PATH" >> ~/.zshrc \
    && cd /home/${USER_NAME}/work/HEPtools \
    && rm -rf ./pythia${PYTHIA_VERSION} && rm ~/pythia${PYTHIA_VERSION}.tgz
    
# Install OpenLoops
RUN sudo apt update && sudo apt install -y sqlite3 libsqlite3-dev scons swig \
    && sudo apt -y clean && sudo apt -y autoremove \
    && sudo rm -rf /var/lib/apt/lists/* \
    && cd /home/${USER_NAME}/work/HEPtools \
    && git clone -b public_beta https://gitlab.com/openloops/OpenLoops.git \
    && cd OpenLoops \
# For aarch64, uncomment the following two lines
# For AMD64, comment the following two lines
    && echo "[OpenLoops]" > openloops.cfg \
    && echo "cmodel = small" >> openloops.cfg \
    && ./scons 
    
# Install Sherpa 2
ARG SHERPA2_VER=2.2.15
RUN wget https://sherpa.hepforge.org/downloads/SHERPA-MC-${SHERPA2_VER}.tar.gz -O ~/SHERPA-MC-${SHERPA2_VER}.tar.gz \
    && sudo apt update && sudo apt install -y libzip-dev python3-distutils \
    && sudo apt -y clean && sudo apt -y autoremove \
    && sudo rm -rf /var/lib/apt/lists/* \
    && cd /home/${USER_NAME}/work \
    && tar -xvf ~/SHERPA-MC-${SHERPA2_VER}.tar.gz \
    && cd SHERPA-MC-${SHERPA2_VER} \
    && ./configure --prefix=/home/${USER_NAME}/work/sherpa2 \
      --enable-pyext --enable-ufo --enable-pythia  \
      --enable-hepmc2=/home/${USER_NAME}/work/HEPtools/hepmc2 \
      --enable-gzip --enable-lhapdf=/home/${USER_NAME}/work/HEPtools/lhapdf \
      --enable-fastjet=/home/${USER_NAME}/work/HEPtools/fastjet \
      --enable-openloops=/home/${USER_NAME}/work/HEPtools/OpenLoops \
    && make && make install \
    && echo "export PATH=/home/${USER_NAME}/work/sherpa2/bin:\$PATH" >> ~/.zshrc \
    && cd /home/${USER_NAME}/work \
    && rm -rf SHERPA-MC-${SHERPA2_VER} && rm ~/SHERPA-MC-${SHERPA2_VER}.tar.gz

WORKDIR /home/${USER_NAME}/work
# VOLUME /home/${USER_NAME}/Data
RUN mkdir -p ~/Data

ENTRYPOINT ["/bin/zsh"]



